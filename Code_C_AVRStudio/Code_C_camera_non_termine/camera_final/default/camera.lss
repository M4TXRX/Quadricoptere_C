
camera.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000024  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000102  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000cb  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000012d  00000000  00000000  00000319  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a4  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Wait>:
 *  Author: Mathieu
 */ 
#include <avr/io.h>
#include <util/delay.h>
void Wait()
{
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	50 e0       	ldi	r21, 0x00	; 0
  74:	ca 01       	movw	r24, r20
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <Wait+0xa>
	uint16_t i;
	for(i=0;i<50;i++)
  7a:	ca 01       	movw	r24, r20
  7c:	01 97       	sbiw	r24, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <Wait+0x10>
  80:	2f 5f       	subi	r18, 0xFF	; 255
  82:	3f 4f       	sbci	r19, 0xFF	; 255
  84:	22 33       	cpi	r18, 0x32	; 50
  86:	31 05       	cpc	r19, r1
  88:	a9 f7       	brne	.-22     	; 0x74 <Wait+0x8>
	{
		_delay_loop_2(0);
		_delay_loop_2(0);
	}
}
  8a:	08 95       	ret

0000008c <main>:
void main()
{
	int AngleY;
	//FOR TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
  8c:	8f b5       	in	r24, 0x2f	; 47
  8e:	82 6a       	ori	r24, 0xA2	; 162
  90:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(0<<CS10); //PRESCALER=8 MODE 14(FAST PWM)
  92:	8e b5       	in	r24, 0x2e	; 46
  94:	8a 61       	ori	r24, 0x1A	; 26
  96:	8e bd       	out	0x2e, r24	; 46
	ICR1=9210;  //fPWM=50Hz
  98:	8a ef       	ldi	r24, 0xFA	; 250
  9a:	93 e2       	ldi	r25, 0x23	; 35
  9c:	97 bd       	out	0x27, r25	; 39
  9e:	86 bd       	out	0x26, r24	; 38
	DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Output
  a0:	81 b3       	in	r24, 0x11	; 17
  a2:	80 63       	ori	r24, 0x30	; 48
  a4:	81 bb       	out	0x11, r24	; 17
	AngleY=-352;
	while(1)
	{
	OCR1A=0.32*AngleY+690;
  a6:	81 e4       	ldi	r24, 0x41	; 65
  a8:	92 e0       	ldi	r25, 0x02	; 2
  aa:	9b bd       	out	0x2b, r25	; 43
  ac:	8a bd       	out	0x2a, r24	; 42
  ae:	fd cf       	rjmp	.-6      	; 0xaa <main+0x1e>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
